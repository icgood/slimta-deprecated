
--- Module used to parse, store, load, and stringify message contents in an
--  easy, sensible way. This includes header parsing and modification.
--  @see slimta.message
module "slimta.message.contents"

--- Copies a message contents object into a new object. This is a "deep" copy
--  operation, tables are not recycled.
--  @param old the original message contents object.
--  @return a new message contents object, identical to the original.
function slimta.message.contents.copy(old)

--- Creates a new message contents object from the given information. The
--  headers are accessible from the resulting message object in the "headers"
--  field. For example, to get the first "From" header, use
--  <code>contents.headers.from[1]</code>, which will return nil if no such
--  header exists.
--  @param raw_data raw message contents, such as that read from an SMTP stream
--                  or from a storage engine.
--  @return a new message contents object.
function slimta.message.contents.new(raw_data)

--- Adds a new header to the message. This is the ONLY way to add new headers
--  to a message, modifying the "headers" table will NOT work.
--  @param self the message contents object.
--  @param name the name of the header to add, e.g. "X-Awesome-Sauce".
--  @param value the raw contents of the header, e.g. "127.0.0.1".
--  @param after_existing if true, append the new header instead of prepending
--                        it to the list of headers.
function slimta.message.contents.add_header(self, name, value, after_existing)

--- Removes ALL headers of the given name from the message. This is the ONLY
--  way to remove headers from a message, modifying the "headers" table will NOT
--  work.
--  @param self the message contents object.
--  @param name the name of the header to remove, case insensitive.
function slimta.message.contents.delete_header(self, name)

--- Converts the message contents object into a raw string, headers included.
--  @param self the message contents object.
function slimta.message.contents.__tostring(self)

--- Generates a table array of XML representing the message contents object. The
--  message contents are actually written to the XML body as an index reference
--  to a field in the attachments table where the raw data is written.
--  @param self the message contents object.
--  @param attachments table of attachments for raw message data.
--  @return a table array of XML lines.
--  @see slimta.xml.writer
function slimta.message.contents.to_xml(self, attachments)

--- Loads a message contents object from the given XML node tree, as generated by
--  the slimta.xml.reader module.
--  @param tree_node node of the XML tree where the message contents starts.
--  @param attachments table of attachments with raw message data.
--  @return a new message contents object.
--  @see slimta.xml.reader
function slimta.message.contents.from_xml(tree_node, attachments)

--- Creates a simple key-value table describing all the information contained
--  in the message contents object, suitable for serialization or, more
--  commonly, storage in a storage engine. Because message contents are stored
--  separately from message meta information, this function is likely a no-op.
--  @param self the message contents object.
--  @param meta if given, keys are added to this table rather than a new one.
--  @return the simple table of meta information.
function slimta.message.contents.to_meta(self, meta)

--- Loads a message contents object from the given simple table of meta
--  information. Because message contents are stored separately from message
--  meta information, this function does not actually use the meta table, it is
--  only given for consistency.
--  @param meta simple table of meta information to load from.
--  @param raw_contents raw message data.
--  @return a new message contents object.
function slimta.message.contents.from_meta(meta, raw_contents)

-- vim:filetype=lua:sw=4:ts=4:sts=4:et:

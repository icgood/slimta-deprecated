
slimta.message
====================

.. currentmodule:: slimta.message

Module for representing email message and all their associated data. This module
implements the routines for storing and retrieving messages from a storage
engine and serializing messages into transmittable form.

.. function:: copy(old)

   Copies the contents and information of an old message into a new one. This is
   a "deep" copy operation, tables are not recycled.

   :param old: :mod:`slimta.message` object to copy.
   :return: a new :mod:`slimta.message` object, identical to the original.

.. function:: new(client, envelope, contents, [timestamp], [id], [attempts])

   Creates a new :mod:`slimta.message` object described by the given
   information.

   :param client: :mod:`slimta.message.client` object.
   :param envelope: :mod:`slimta.message.envelope` object.
   :param contents: :mod:`slimta.message.contents` object.
   :param timestamp: UNIX timestamp of original message reception.
   :param id: storage ID of a message, if available.
   :param attempts: number of delivery attempts the message has undergone.
   :return: new :mod:`slimta.message` object.

.. function:: load(storage_session, id)

   Loads the message from storage using a pre-connected storage session. After
   loading, ``message.id`` is set to *id* if successful.

   :param storage_session: :mod:`slimta.storage.session` object.
   :param id: message ID string to load from storage.
   :return: new :mod:`slimta.message` object if successful, or nil followed by
    an error message. Error message will be ``invalid`` if the query simply did
    not match any message IDs.

.. function:: store(self, storage_session, [id])

   Stores the message into storage using a pre-connected storage session. If
   *id* is not given, this message will generate a new, unclaimed UUID which
   will be set as ``self.id``.

   :param self: :mod:`slimta.message` object.
   :param storage_session: :mod:`slimta.storage.session` object.
   :param id: use this storage ID if given.
   :return: the message ID string where the message was stored.

.. function:: increment_attempts(self, storage_session)

   Increments ``self.attempts`` and updates the corresponding key for the
   message in storage. The message must already be in storage.

   :param self: :mod:`slimta.message` object.
   :param storage_session: :mod:`slimta.storage.session` object.

.. function:: to_xml(self, attachments)

   Generates a table array of lines of XML representing the message object. For
   the message contents, instead of serializing into XML, they are appended to
   the given *attachments* table so they can be sent separately in raw form.

   :param self: :mod:`slimta.message` object.
   :param attachments: table of attachments for message contents.
   :return: a table array of XML lines for :mod:`slimta.xml.writer`.

.. function:: from_xml(tree_node, attachments, [force_id])

   Loads a message object from the given XML node tree, as generated by the
   :mod:`slimta.xml.reader` module. Message contents are read from the
   *attachments* table.

   :param tree_node: node of the XML tree where the message starts.
   :param attachments: table of attachments containing message contents.
   :param force_id: if given, will be set as the message's storage ID string,
    potentially overriding any value stored in the XML.
   :return: new :mod:`slimta.message` object.

.. function:: to_meta(self, meta)

   Creates a simple key-value table describing all the information contained in
   the message object, suitable for serialization or, more commonly, storage in
   a storage engine.

   :param self: :mod:`slimta.message` object.
   :param meta: the table to add simple key-value meta information to.

.. function:: from_meta(meta, raw_contents, [force_id])

   Loads a message object from the given simple table of meta information and
   raw message contents.

   :param meta: table of meta information to load from.
   :param raw_contents: raw message contents string.
   :param force_id: if given, will be set as the message's storage ID string,
    potentially overriding any value specified in the table.
   :return: new :mod:`slimta.message` object.

.. toctree::

   slimta.message.client
   slimta.message.envelope
   slimta.message.contents
   slimta.message.bounce
   slimta.message.response


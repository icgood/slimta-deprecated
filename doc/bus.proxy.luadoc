
--- Module that provides a convenient way to apply policies and make changes to
--  a stream of requests traversing a bus. For example, a message going from the
--  queue to the relayer may not yet have any routing information in order to be
--  relayed.
module("slimta.bus.proxy")

--- Creates a new proxy object between a source and destination bus.
--  @param from_bus requests are received from this bus as the source.
--  @param to_bus passed to the filter as the destination bus to proxy requests
--                to.
--  @param filter optional function to filter requests and proxy them to the
--                destination bus. Accepts two parameters, the destination bus
--                object and the request array. It should return an appropriate
--                response array that will be sent back to the source bus. The
--                default filter simply proxies to the destination without
--                modification.
--  @return a new proxy object.
function slimta.bus.proxy.new(from_bus, to_bus, filter)

--- Waits for a new request on the source bus. When one is received, a callable
--  object is returned that will run the proxy object's filter function. Usually
--  the application will call the returned value in a new thread so that
--  it may keep calling accept() for new requests.
--  @param self the proxy object.
--  @return a callable object to filter and proxy the received request.
function slimta.bus.proxy.accept(self)

--- Enters an infinite loop of accepting new requests and starting new threads
--  to proxy them. This metamethod is given as a convenience so that a proxy
--  object can be called as a new thread.
--  @param self the proxy object.
--  @return this function never returns and should be called in its own thread.
function slimta.bus.proxy.__call(self)

-- vim:filetype=lua:sw=4:ts=4:sts=4:et:


Working with Message Objects
============================

.. toctree::
   :maxdepth: 1

   contents
   bounces
   responses

Email messages are represented in *slimta* by the :mod:`~slimta.message` module.
Certain categories of data are represented by sub-modules, specifically
:mod:`~slimta.message.client`, :mod:`~slimta.message.envelope`, and
:mod:`~slimta.message.contents`.

The following attributes are available in message objects:

* ``timestamp`` -- The UNIX timestamp when the message object was received from
  the *edge* service or, in case of :doc:`bounces <bounces>`, generated by the
  *queue* service.
* ``attempts`` -- The number of delivery attempts the message has undergone.
* ``id`` -- The storage ID string of the message, if the message has been
  stored.
* ``client`` -- :mod:`~slimta.message.client` object describing the client that
  connected to the *edge* service and sent the message.

  * ``protocol`` -- Protocol string used to receive the message from an *edge*
    service, e.g. ``"SMTP"`` or ``"HTTP"``.
  * ``ehlo`` -- EHLO string given by the client.
  * ``ip`` -- Address data for the client. To get an IP address string from
    this, use Lua's ``tostring()`` function.
  * ``security`` -- String describing the encryption used, e.g. ``"TLS"`` or
    ``"none"``.
  * ``receiver`` -- String identifying the hostname of the *edge* service that
    received the message.
  * ``auth_info`` -- If the *edge* service authenticated the client, this is the
    identity string they used (e.g. the username).

* ``envelope`` -- :mod:`~slimta.message.envelope` object describing the sender,
  recipients, and routing information associated with the message.

  * ``sender`` -- The sender address string.
  * ``recipients`` -- Table array of recipient address strings.
  * ``dest_relayer`` -- String defining which relayer the message should be
    delivered on.
  * ``dest_host`` -- Host the relayer should use for delivery attempts, if
    applicable.
  * ``dest_port`` -- Port the relayer should use for delivery attempts, if
    applicable.

* ``contents`` -- :mod:`~slimta.message.contents` object containing message
  headers and data.

  * ``contents.headers`` -- Keys of this table correspond to table arrays of the
    message's headers. Looking up a non-existent header will resolve to an empty
    table, not ``nil``.

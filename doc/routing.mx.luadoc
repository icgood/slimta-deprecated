
--- Module for standard, RFC-compliant MX-based routing logic. When a message is
--  MX routed, it is split such that there is a new message with the recipients
--  of each unique recipient domain. The new messages are identical otherwise.
--  Any recipient without a domain is left in the original message object and
--  deemed "unroutable".
module("slimta.routing.mx")

--- Creates a new MX routing object. Individual objects can have their own logic
--  for picking records, relayers, and ports, as well as having hard-coded rules
--  set by the set_mx() method.
--  @param pick_mx a function which, given a message as a parameter, returns an
--                 index defining which MX record to use, with 1 being the first
--                 record of the lowest preference value and N being the last
--                 record of the highest preference value. If the resulting
--                 index is greater than a domain's N, the value is wrapped. The
--                 default is to pick directly based on the number of delivery
--                 attempts.
--  @param pick_relayer a function which, given a message as a parameter,
--                      returnsa string indicating a relayer. The default is the
--                      string "SMTP". See the slimta.relay module for more
--                      information.
--  @param pick_port a function which, iven a message as a parameter, returns a
--                   port number to attempt delivery to. The default is port 25.
--  @return a new routing.mx object.
function new(pick_mx, pick_relayer, pick_port)

--- Sets a hard-coded MX record for a domain. Instead of doing a DNS MX query,
--  this table is indexed by the object's pick_mx function for delivery. This is
--  primarily used for testing, but may be useful for some special policies.
--  @param self the routing.mx object.
--  @param domain the domain to hard-code.
--  @param record an array of hard-coded MX records, ordered by lowest to
--                highest preference value.
function set_mx(self, domain, record)

--- Takes a message and routes it according the logic established by the object.
--  If a recipient domain is hard-coded by set_mx(), that takes precedence over
--  doing a DNS MX query.
--  @param self the routing.mx object.
--  @param message the message object to route.
--  @return returns an array of new message objects, one for each unique
--          recipient domain, with their envelopes correctly filled with
--          relaying information. The original message object may be returned as
--          a second returned value with any recipients that did not have a
--          recognizable domain name.
function route(self, message)

-- vim:filetype=lua:sw=4:ts=4:sts=4:et:

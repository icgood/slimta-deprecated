
--- Module for representing email message and all their associated data. This
--  module implements the routines for storing and retrieving messages from a
--  storage engine and serializing messages into transmittable form.
module "slimta.message"

--- Copies the contents and information of an old message into a new one. This
--  is a "deep" copy operation, tables are not recycled.
--  @param old message object to copy.
--  @return a new message object identical to the original.
function slimta.message.copy(old)

--- Creates a new message object described by the given information.
--  @param client message.client object containing client info.
--  @param envelope message.envelope object containing envelope info.
--  @param contents message.contents object containing message contents.
--  @param timestamp UNIX timestamp of original message reception.
--  @param id storage ID of a message, if available.
--  @param attempts number of delivery attempts the message has undergone.
--  @return a new message object.
--  @see slimta.message.client
--  @see slimta.message.envelope
--  @see slimta.message.contents
function slimta.message.new(client, envelope, contents, timestamp, id, attempts)

--- Loads the message from storage using a pre-connected storage session. After
--  loading, message.id is set to the given id if successful.
--  @param storage_session pre-connected storage session object.
--  @param id message ID string to load from storage.
--  @return new message object if successful, or nil followed by an error
--          message. Error message will be "invalid" if the query did not error
--          but did not match any message IDs.
--  @see slimta.storage
function slimta.message.load(storage_session, id)

--- Stores the message into storage using a pre-connected storage session. If an
--  existing ID is not given, this message will generate a new, unclaimed UUID
--  which will be set as self.id.
--  @param self the message object.
--  @param storage_session pre-connected storage session object.
--  @param id optional existing message ID, for updating an existing stored
--            message.
--  @return the message ID where the message was stored.
--  @see slimta.storage
function slimta.message.store(self, storage_session, id)

--- Increments self.attempts and updates the corresponding key for the message
--  in storage. The message must already be in storage.
--  @param self the message object, already in storage.
--  @param storage_session pre-connected storage session object.
--  @see slimta.storage
function slimta.message.increment_attempts(self, storage_session)

--- Generates a table array of lines of XML representing the message object. For
--  the message contents, instead of serializing into XML, they are appended to
--  the given table of attachments so they can be sent separately in raw form.
--  @param self the message object.
--  @param attachments table of attachments for message contents.
--  @see slimta.xml.writer
function slimta.message.to_xml(self, attachments) 

--- Loads a message object from the given XML node tree, as generated by the
--  slimta.xml.reader module. Message contents are read from the attachments
--  table.
--  @param tree_node node of the XML tree where the message starts.
--  @param attachments table of attachments containing message contents.
--  @param force_id if given, will be set as the message's storage ID,
--                  potentially overriding any value stored in the XML.
--  @return a new message object.
--  @see slimta.xml.reader
function slimta.message.from_xml(tree_node, attachments, force_id)

--- Creates a simple key-value table describing all the information contained
--  in the message object, suitable for serialization or, more commonly, storage
--  in a storage engine.
--  @param message the message object.
--  @param meta if given, keys are added to this table rather than a new one.
--  @return the simple table of meta information.
function slimta.message.to_meta(message, meta)

--- Loads a message object from the given simple table of meta information and
--  raw message contents.
--  @param meta simple table of meta information to load from.
--  @param raw_contents raw message contents.
--  @param force_id if given, will be set as the message's storage ID,
--                  potentially overriding any value loaded from the table.
--  @return a new message object.
function slimta.message.from_meta(meta, raw_contents, force_id)

-- vim:filetype=lua:sw=4:ts=4:sts=4:et:

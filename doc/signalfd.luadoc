
--- Module for catching signals in an event-based manner. Uses the signalfd()
--  system call only available on GNU/Linux systems.
module "slimta.signalfd"

--- Returns a signal mask suitable for passing to sigprocmask() or new(). The
--  signals passed to this function are simply the namesin the signal(7) man
--  page, e.g. "SIGHUP" or "SIGTERM".
--  @param sigs table of signal names.
--  @return signal mask suitable for later use.
function mask(sigs)

--- Sets the new signal mask of the current process and returns the old one.
--  The signal mask defines those signals whose handlers are blocked, which
--  does not mean that signalfd cannot catch them.
--  @param mask the new signal mask.
--  @return the old signal mask.
function sigprocmask(mask)

--- Creates a new signalfd object.
--  @return the new signalfd object.
function new()

--- Sets the mask of the signalfd object. This defines which signals the
--  signalfd's read() method will catch. Generally, this mask is also passed
--  to sigprocmask() to have their default handlers blocked.
--  @param self the signalfd object.
--  @param mask the new mask for the signalfd object.
function setmask(self, mask)

--- Closes the signalfd object.
--  @param self the signalfd object.
function close(self)

--- Pauses the current ratchet thread until a signal belonging to the signalfd
--  object's mask is sent to the current process. The name string of this signal
--  is the return value of this function.
--  @param self the signalfd object.
--  @return a string name of the signal received, e.g. "SIGUSR1".
function read(self)

-- vim:filetype=lua:sw=4:ts=4:sts=4:et:


--- Module describing the methods exposed by storage engine sessions. These
--  objects can only be created by calling the <code>connect()</code> method
--  of a storage engine, they have no constructors. You should always call
--  a session's <code>close()</code> method when you are done with it.
--  @see slimta.storage
module "slimta.storage.session"

--- Closes the given session. For example, if the storage engine required a
--  socket connection to a remote instance, this socket would be closed.
--  @param self the storage session object.
function slimta.storage.session.close(self)

--- Returns a table of message IDs that are currently being delivered by a
--  relayer service. These messages should be considered "locked" until the
--  delivery attempt is completed.
--  @param self the storage session object.
--  @return table of active message IDs.
function slimta.storage.session.get_active_messages(self) 

--- Returns a table of message IDs that are currently awaiting their next
--  retry attempt.
--  @param self the storage session object.
--  @return table of deferred message IDs.
function slimta.storage.session.get_deferred_messages(self)

--- Returns a table of all message IDs stored in the engine, in any state.
--  @param self the storage session object.
--  @return table of message IDs.
function slimta.storage.session.get_all_messages(self)

--- Randomly generates a new message ID and checks if it is available in the
--  storage engine. If so, it is returned, if not it tries again with new
--  random IDs until one is available. The returned message ID should be
--  considered a stored message, even if no meta information or contents have
--  been written yet.
--  @param self the storage session object.
--  @return a new, claimed message ID.
function slimta.storage.session.claim_message_id(self)

--- Sets the message meta information to the contents of the given simple
--  meta table.
--  @param self the storage session object.
--  @param id the message ID to set meta for.
--  @param meta the simple meta key-value table to store.
--  @see slimta.message.to_meta
function slimta.storage.session.set_message_meta(self, id, meta)

--- Sets one key in the message meta information to the given value. This is
--  especially useful for keys that change frequently, like the number of
--  message delivery attempts.
--  @param self the storage session object.
--  @param id the message ID to set meta for.
--  @param key the meta key to set.
--  @param value the new value for the meta key.
function slimta.storage.session.set_message_meta_key(self, id, key, value)

--- Sets the message contents. Usually this should only ever happen once for
--  a message.
--  @param self the storage session object.
--  @param id the message ID to set contents for.
--  @param contents the message contents object.
--  @see slimta.message.contents
function slimta.storage.session.set_message_contents(self, id, contents)

--- Returns the stored simple meta information table.
--  @param self the storage session object.
--  @param id the message ID to load meta for.
--  @return the meta information table.
--  @see slimta.message.from_meta
function slimta.storage.session.get_message_meta(self, id)

--- Returns the value of one stored meta key.
--  @param self the storage session object.
--  @param id the message ID to load meta for.
--  @param key the meta key to load.
--  @return the value of the meta key.
function slimta.storage.session.get_message_meta_key(self, id, key)

--- Loads the message contents from storage.
--  @param self the storage session object.
--  @param id the message ID to load contents for.
--  @return the raw message contents string.
--  @see slimta.message.contents
function slimta.storage.session.get_message_contents(self, id)

--- Sets the next retry attempt time for the given message. This function also
--  signifies the message is deferred.
--  @param self the storage session object.
--  @param id the message ID to set retry attempt timestamp for.
--  @param timestamp retry delivery attempt no earlier than this timestamp.
function slimta.storage.session.set_message_retry(self, id, timestamp)

--- Locks a message for a period of time. This function does not necessarily
--  prevent other access/modification of the message, but MUST guarantee that
--  other attempts (by other threads, processes, or systems) to lock the message
--  will fail for the duration. This function signifies the message is active,
--  and no other relayer may attempt delivery.
--  @param self the storage session object.
--  @param id the message ID to lock.
--  @param length the number of seconds to secure the lock.
--  @return true if the lock was successful, false if the lock could not be
--          established right now.
function slimta.storage.session.lock_message(self, id, length)

--- Unlocks the message, so that the next future attempt (by any thread,
--  process, or system) to lock the message will be successful.
--  @param self the storage session object.
--  @param id the message ID to unlock.
function slimta.storage.session.unlock_message(self, id)

--- Removes all references to the message in the storage engine. This is useful
--  when the message was successfully delivered or when a message was
--  permanently failed and a bounce message was queued to the sender.
--  @param self the storage session object.
--  @param id the message ID to delete.
function slimta.storage.session.delete_message(self, id)

-- vim:filetype=lua:sw=4:ts=4:sts=4:et:
